(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{92:function(e,n,i){"use strict";i.r(n),i.d(n,"frontMatter",(function(){return o})),i.d(n,"metadata",(function(){return m})),i.d(n,"rightToc",(function(){return c})),i.d(n,"default",(function(){return d}));var a=i(3),r=i(7),t=(i(0),i(155)),o={id:"api-bridges",title:"Bridges"},m={unversionedId:"api-bridges",id:"api-bridges",isDocsHomePage:!1,title:"Bridges",description:"To make use of any schema, uniforms have to create a bridge of it - a unified schema mapper.",source:"@site/../docs/api-bridges.md",slug:"/api-bridges",permalink:"/docs/api-bridges",version:"current",sidebar:"docs",previous:{title:"Fields",permalink:"/docs/api-fields"},next:{title:"Context data",permalink:"/docs/api-context-data"}},c=[{value:"<code>GraphQLBridge</code>",id:"graphqlbridge",children:[]},{value:"<code>JSONSchemaBridge</code>",id:"jsonschemabridge",children:[]},{value:"<code>SimpleSchema2Bridge</code>",id:"simpleschema2bridge",children:[]},{value:"<code>SimpleSchemaBridge</code>",id:"simpleschemabridge",children:[]}],s={rightToc:c};function d(e){var n=e.components,i=Object(r.a)(e,["components"]);return Object(t.b)("wrapper",Object(a.a)({},s,i,{components:n,mdxType:"MDXLayout"}),Object(t.b)("p",null,"To make use of any schema, uniforms have to create a ",Object(t.b)("em",{parentName:"p"},"bridge")," of it - a unified schema mapper."),Object(t.b)("p",{align:"center"},Object(t.b)("img",{src:"/img/bridge-concept.svg"})),Object(t.b)("p",null,"Currently available bridges:"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"GraphQLBridge")," in ",Object(t.b)("inlineCode",{parentName:"li"},"uniforms-bridge-graphql")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"JSONSchemaBridge")," in ",Object(t.b)("inlineCode",{parentName:"li"},"uniforms-bridge-json-schema")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"SimpleSchema2Bridge")," in ",Object(t.b)("inlineCode",{parentName:"li"},"uniforms-bridge-simple-schema-2")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"SimpleSchemaBridge")," in ",Object(t.b)("inlineCode",{parentName:"li"},"uniforms-bridge-simple-schema"))),Object(t.b)("h2",{id:"graphqlbridge"},Object(t.b)("inlineCode",{parentName:"h2"},"GraphQLBridge")),Object(t.b)("pre",null,Object(t.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { GraphQLBridge } from 'uniforms-bridge-graphql';\nimport { buildASTSchema } from 'graphql';\nimport { parse } from 'graphql';\n\nconst schema = `\n    type Author {\n        id:        String!\n        firstName: String\n        lastName:  String\n    }\n\n    type Post {\n        id:     Int!\n        author: Author!\n        title:  String\n        votes:  Int\n    }\n\n    # This is required by buildASTSchema\n    type Query { anything: ID }\n`;\n\nconst schemaType = buildASTSchema(parse(schema)).getType('Post');\nconst schemaData = {\n  id: {\n    allowedValues: [1, 2, 3]\n  },\n  title: {\n    options: [\n      { label: 1, value: 'a' },\n      { label: 2, value: 'b' }\n    ]\n  }\n};\n\nconst schemaValidator = model => {\n  const details = [];\n\n  if (!model.id) {\n    details.push({ name: 'id', message: 'ID is required!' });\n  }\n\n  // ...\n\n  if (details.length) {\n    throw { details };\n  }\n};\n\nconst bridge = new GraphQLBridge(schemaType, schemaValidator, schemaData);\n")),Object(t.b)("h2",{id:"jsonschemabridge"},Object(t.b)("inlineCode",{parentName:"h2"},"JSONSchemaBridge")),Object(t.b)("pre",null,Object(t.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import Ajv from 'ajv';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nconst ajv = new Ajv({ allErrors: true, useDefaults: true });\n\nconst schema = {\n  title: 'Person',\n  type: 'object',\n  properties: {\n    firstName: { type: 'string' },\n    lastName: { type: 'string' },\n    age: {\n      description: 'Age in years',\n      type: 'integer',\n      minimum: 0\n    }\n  },\n  required: ['firstName', 'lastName']\n};\n\nfunction createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n\nconst schemaValidator = createValidator(schema);\n\nconst bridge = new JSONSchemaBridge(schema, schemaValidator);\n")),Object(t.b)("h2",{id:"simpleschema2bridge"},Object(t.b)("inlineCode",{parentName:"h2"},"SimpleSchema2Bridge")),Object(t.b)("pre",null,Object(t.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import SimpleSchema from 'simpl-schema';\nimport SimpleSchema2Bridge from 'uniforms-bridge-simple-schema-2';\n\nconst PersonSchema = new SimpleSchema({\n  // ...\n\n  aboutMe: {\n    type: String,\n    uniforms: MyText, // Component...\n    uniforms: {\n      // ...or object...\n      component: MyText, // ...with component...\n      propA: 1 // ...and/or extra props.\n    }\n  }\n});\n\nconst bridge = new SimpleSchema2Bridge(PersonSchema);\n")),Object(t.b)("h2",{id:"simpleschemabridge"},Object(t.b)("inlineCode",{parentName:"h2"},"SimpleSchemaBridge")),Object(t.b)("pre",null,Object(t.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import SimpleSchemaBridge from 'uniforms-bridge-simple-schema';\nimport { SimpleSchema } from 'aldeed:simple-schema';\n\nconst PersonSchema = new SimpleSchema({\n  // ...\n\n  aboutMe: {\n    type: String,\n    uniforms: MyText, // Component...\n    uniforms: {\n      // ...or object...\n      component: MyText, // ...with component...\n      propA: 1 // ...and/or extra props.\n    }\n  }\n});\n\nconst bridge = new SimpleSchemaBridge(PersonSchema);\n")))}d.isMDXComponent=!0}}]);