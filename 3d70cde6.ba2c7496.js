(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{78:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return m}));var n=a(3),o=a(7),i=(a(0),a(155)),r={id:"faq",title:"FAQ"},l={unversionedId:"faq",id:"faq",isDocsHomePage:!1,title:"FAQ",description:"How can I customize/style my form fields?",source:"@site/../docs/faq.md",slug:"/faq",permalink:"/docs/faq",version:"current",sidebar:"docs",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Migrating v2 to v3",permalink:"/docs/migrating-2-to-3"}},s=[{value:"How can I customize/style my form fields?",id:"how-can-i-customizestyle-my-form-fields",children:[]},{value:"How can I create custom fields?",id:"how-can-i-create-custom-fields",children:[]},{value:"How can I use a custom field in my form?",id:"how-can-i-use-a-custom-field-in-my-form",children:[]},{value:"How can I pass additional props to the custom field?",id:"how-can-i-pass-additional-props-to-the-custom-field",children:[]},{value:"How can I have a dynamic label? (e.g. handling i18n)",id:"how-can-i-have-a-dynamic-label-eg-handling-i18n",children:[]},{value:"How can I change the way my form validates?",id:"how-can-i-change-the-way-my-form-validates",children:[]},{value:"How can I reset my form state?",id:"how-can-i-reset-my-form-state",children:[]},{value:"I want my form to be prefilled with data. How can I do that?",id:"i-want-my-form-to-be-prefilled-with-data-how-can-i-do-that",children:[]},{value:"How can I transform my model?",id:"how-can-i-transform-my-model",children:[]},{value:"How can I make my form autofocused?",id:"how-can-i-make-my-form-autofocused",children:[]},{value:"How can I create a multi-step form?",id:"how-can-i-create-a-multi-step-form",children:[]},{value:"How can I know a current form state?",id:"how-can-i-know-a-current-form-state",children:[]},{value:"I want to disable a submit button until there is a difference between the current form state and my model. How can I do it?",id:"i-want-to-disable-a-submit-button-until-there-is-a-difference-between-the-current-form-state-and-my-model-how-can-i-do-it",children:[]}],c={rightToc:s};function m(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"how-can-i-customizestyle-my-form-fields"},"How can I customize/style my form fields?"),Object(i.b)("p",null,"You can style your form fields simply by passing a ",Object(i.b)("inlineCode",{parentName:"p"},"className")," property."),Object(i.b)("h3",{id:"how-can-i-create-custom-fields"},"How can I create custom fields?"),Object(i.b)("p",null,"You can create a custom field by wrapping your component inside the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api-helpers#connectfieldcomponent-options"}),Object(i.b)("inlineCode",{parentName:"a"},"connectField")),"."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"connectField")," will pass various props related to the form management, such as ",Object(i.b)("inlineCode",{parentName:"p"},"onChange()")," function, current field's value, errors and so on, to your component."),Object(i.b)("p",null,"Please visit the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/tutorials-creating-custom-field"}),"Tutorials > Creating a custom field")," tutorial to see how to create your own fields."),Object(i.b)("h3",{id:"how-can-i-use-a-custom-field-in-my-form"},"How can I use a custom field in my form?"),Object(i.b)("p",null,"You can tell your schema to use your custom field by adding the ",Object(i.b)("inlineCode",{parentName:"p"},"uniforms")," property."),Object(i.b)("p",null,"Example in JSONSchema:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const schema = {\n  /*...*/\n  firstName: {\n    type: 'string',\n    uniforms: MyCustomFirstNameField\n  }\n  /*...*/\n};\n")),Object(i.b)("p",null,"We say that the component used for the ",Object(i.b)("inlineCode",{parentName:"p"},"firstName")," property will be the ",Object(i.b)("inlineCode",{parentName:"p"},"MyCustomFirstNameField"),"."),Object(i.b)("p",null,"You can also leave the schema untouched and pass your custom field directly to the ",Object(i.b)("inlineCode",{parentName:"p"},"AutoField")," in a ",Object(i.b)("inlineCode",{parentName:"p"},"component")," property instead:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'<AutoForm schema={schema} onSubmit={onSubmit}>\n  /*...*/\n  <AutoField component={MyCustomFirstNameField} name="firstName" />\n  /*...*/\n</AutoForm>\n')),Object(i.b)("h3",{id:"how-can-i-pass-additional-props-to-the-custom-field"},"How can I pass additional props to the custom field?"),Object(i.b)("p",null,"You can pass any additional props to your custom field, by converting the ",Object(i.b)("inlineCode",{parentName:"p"},"uniforms")," property to the type of object, with the ",Object(i.b)("inlineCode",{parentName:"p"},"component")," key. Any other keys will be treated as props."),Object(i.b)("p",null,"E.g. in JSONSchema:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const schema = {\n  /*...*/\n  firstName: {\n    type: 'string',\n    uniforms: {\n      component: MyCustomFirstNameField,\n      propA: 1,\n      propB: 2\n    }\n  }\n  /*...*/\n};\n")),Object(i.b)("p",null,"We say that the component used for the ",Object(i.b)("inlineCode",{parentName:"p"},"firstName")," property will be the ",Object(i.b)("inlineCode",{parentName:"p"},"MyCustomFirstNameField")," and it will receive 2 additonal props: ",Object(i.b)("inlineCode",{parentName:"p"},"propA")," and ",Object(i.b)("inlineCode",{parentName:"p"},"propB"),"."),Object(i.b)("p",null,"You can also leave the schema untouched and pass your custom field with props directly to the ",Object(i.b)("inlineCode",{parentName:"p"},"AutoField")," instead:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'<AutoForm schema={schema} onSubmit={onSubmit}>\n  /*...*/\n  <AutoField\n    component={MyCustomFirstNameField}\n    name="firstName"\n    propA={1}\n    propB={2}\n  />\n  /*...*/\n</AutoForm>\n')),Object(i.b)("h3",{id:"how-can-i-have-a-dynamic-label-eg-handling-i18n"},"How can I have a dynamic label? (e.g. handling i18n)"),Object(i.b)("p",null,"There are few ways to handle that, depending on the level of abstraction you want to do it - schema, field or ",Object(i.b)("inlineCode",{parentName:"p"},"AutoField")," component."),Object(i.b)("p",null,"On the ",Object(i.b)("strong",{parentName:"p"},"schema")," level, you can use ",Object(i.b)("inlineCode",{parentName:"p"},"uniforms: {...}")," object property to pass extra props to the field.\nA function returning it (",Object(i.b)("inlineCode",{parentName:"p"},"uniforms: () => ({...})"),") is also accepted. With it, dynamic labels can be fetched from any source."),Object(i.b)("p",null,"On the ",Object(i.b)("strong",{parentName:"p"},"field")," level, you can prepare your own component set, where you will use ",Object(i.b)("inlineCode",{parentName:"p"},"<Translate>{label}</Translate>")," instead of ",Object(i.b)("inlineCode",{parentName:"p"},"{label}"),"."),Object(i.b)("p",null,"While the first one is schema-dependent and the second is theme-dependent, there's an additional option, somewhere in between. You can create a custom ",Object(i.b)("inlineCode",{parentName:"p"},"AutoField")," component, based on a builtin one, where you provide some additional props and label might be one of them (based on other props, like name or some schema field)."),Object(i.b)("h3",{id:"how-can-i-change-the-way-my-form-validates"},"How can I change the way my form validates?"),Object(i.b)("p",null,"Any form can be validated in one of those three styles:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"onChange"),"\nValidate on every change.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"onChangeAfterSubmit")," ",Object(i.b)("em",{parentName:"p"},"(default)"),"\nValidate on every change, but only after first submit.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"onSubmit"),"\nValidate on every submit."))),Object(i.b)("p",null,"You change the way your form validates by setting ",Object(i.b)("inlineCode",{parentName:"p"},"validate")," prop:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'<AutoForm validate="onChange" schema={schema} onSubmit={onSubmit} />\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," If your schema validator accepts any options, those can be passed in ",Object(i.b)("inlineCode",{parentName:"p"},"validator")," prop:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"<AutoForm validator={validatorOptions} />\n")),Object(i.b)("h3",{id:"how-can-i-reset-my-form-state"},"How can I reset my form state?"),Object(i.b)("p",null,"You can use ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://facebook.github.io/react/docs/more-about-refs.html"}),"React ",Object(i.b)("inlineCode",{parentName:"a"},"ref")," prop")," to manually access form methods."),Object(i.b)("p",null,"These methods are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"change(key, value)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reset()")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"submit()")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"validate()")," ",Object(i.b)("em",{parentName:"li"},"(added in ",Object(i.b)("inlineCode",{parentName:"em"},"ValidatedForm"),")"))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const MyForm = ({ schema, onSubmit }) => {\n  let formRef;\n\n  return (\n    <section>\n      <AutoForm\n        ref={ref => (formRef = ref)}\n        schema={schema}\n        onSubmit={onSubmit}\n      />\n      <small onClick={() => formRef.reset()}>Reset</small>\n      <small onClick={() => formRef.submit()}>Submit</small>\n    </section>\n  );\n};\n")),Object(i.b)("p",null,"You can find more about form methods ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api-forms"}),"here"),"."),Object(i.b)("h3",{id:"i-want-my-form-to-be-prefilled-with-data-how-can-i-do-that"},"I want my form to be prefilled with data. How can I do that?"),Object(i.b)("p",null,"You can pass the initial data to the form by using the ",Object(i.b)("inlineCode",{parentName:"p"},"model")," prop."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"model")," is an object with ",Object(i.b)("inlineCode",{parentName:"p"},"{field: value}")," structure. It doesn't matter if it has a prototype or not, but keep in mind that in ",Object(i.b)("inlineCode",{parentName:"p"},"onSubmit")," or in ",Object(i.b)("inlineCode",{parentName:"p"},"onChangeModel")," you'll receive a plain object. If you treat form as an input, then this is a value."),Object(i.b)("h3",{id:"how-can-i-transform-my-model"},"How can I transform my model?"),Object(i.b)("p",null,"You should ",Object(i.b)("inlineCode",{parentName:"p"},"modelTransform"),". It is a function transforming one model into another. It's used in a few situations (called 'modes') described below."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Remember not to mutate a given model!")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"function transform(mode, model) {\n  // This model will be passed to the fields.\n  if (mode === 'form') {\n    /* ... */\n  }\n\n  // This model will be submitted.\n  if (mode === 'submit') {\n    /* ... */\n  }\n\n  // This model will be validated.\n  if (mode === 'validate') {\n    /* ... */\n  }\n\n  // Otherwise, return unaltered model.\n  return model;\n}\n\n<AutoForm modelTransform={transform} schema={schema} onSubmit={onSubmit} />;\n")),Object(i.b)("h3",{id:"how-can-i-make-my-form-autofocused"},"How can I make my form autofocused?"),Object(i.b)("p",null,"You can take a reference to the field and manually trigger ",Object(i.b)("inlineCode",{parentName:"p"},".focus()"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'<AutoField name="firstName" inputRef={field => field.focus()} />\n')),Object(i.b)("h3",{id:"how-can-i-create-a-multi-step-form"},"How can I create a multi-step form?"),Object(i.b)("p",null,"What is a multi-step form? Well, one can imagine at least two completely separate definitions:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"A set of independent forms with a shared state.")," That's the ",Object(i.b)("em",{parentName:"p"},"easier")," one as it's always possible. Each step renders a separate form, with a different schema/validator/style and moves to the next one when submitted, accumulating submitted data."),Object(i.b)("p",{parentName:"li"},"This handles not only multi-step forms but also ",Object(i.b)("s",null,"forms")," wizards with a tree-like structure (i.e. next step bases on the answers). Optional steps (",Object(i.b)("em",{parentName:"p"},"skip step 2 if age < 40"),") and contextual validation (",Object(i.b)("em",{parentName:"p"},"field Y in step 2 has to be greater than the value of X in step 1"),") is also possible."),Object(i.b)("p",{parentName:"li"},"But it gets even better - each step may use a different forms library! It makes no sense but is definitely possible - each form is independent, and the orchestration happens in the application.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"A single form displayed in parts.")," It is, of course, possible to implement it, but the number of all configurations and options is ",Object(i.b)("em",{parentName:"p"},"massive"),". But let's skip that and see where a bigger problem is: the validation. In ",Object(i.b)("strong",{parentName:"p"},"1.")," each step is validated separately (i.e. can have a separate schema). Here, we have only one schema, and the schema itself has to know that ",Object(i.b)("em",{parentName:"p"},"some")," fields were not yet visible."),Object(i.b)("p",{parentName:"li"},"Let's make an example. The schema is very basic: ",Object(i.b)("inlineCode",{parentName:"p"},"{ a: string, b: string }")," (TypeScript notation). Now, as both ",Object(i.b)("inlineCode",{parentName:"p"},"a")," and ",Object(i.b)("inlineCode",{parentName:"p"},"b")," are required, a ",Object(i.b)("em",{parentName:"p"},"valid")," model has to have both. If the first step will render only the ",Object(i.b)("inlineCode",{parentName:"p"},"a")," field (",Object(i.b)("inlineCode",{parentName:"p"},"b")," is on the next page), it's impossible to validate the form. This leads to a situation where the schema (logic) depends on the steps (UI). On the other hand, the form could be validated only at the end. The UX of this solution is terrible though - imagine a ",Object(i.b)("em",{parentName:"p"},"there's an error ten pages back")," error!"))),Object(i.b)("p",null,"We are not planning to provide any out-of-the-box support for multi-step forms as option ",Object(i.b)("strong",{parentName:"p"},"1.")," is most of the time the best. It's not only the cleanest but also less complicated as well as doesn't rely on any library."),Object(i.b)("h3",{id:"how-can-i-know-a-current-form-state"},"How can I know a current form state?"),Object(i.b)("p",null,"A current form state is available in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://reactjs.org/docs/context.html"}),"React context"),", accessible through ",Object(i.b)("inlineCode",{parentName:"p"},"useForm")," and ",Object(i.b)("inlineCode",{parentName:"p"},"useField(name)")," hooks."),Object(i.b)("p",null,"The context data consists of various properties which can be found in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api-context-data"}),"here"),"."),Object(i.b)("h5",{id:"example-usage"},"Example usage:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"function SubmittingState() {\n  const uniforms = useForm();\n  return uniforms.submitting ? 'Submitting...' : null;\n}\n\n<AutoForm>\n  <SubmittingState />\n</AutoForm>;\n")),Object(i.b)("h3",{id:"i-want-to-disable-a-submit-button-until-there-is-a-difference-between-the-current-form-state-and-my-model-how-can-i-do-it"},"I want to disable a submit button until there is a difference between the current form state and my model. How can I do it?"),Object(i.b)("p",null,"Basically, you have to find out whether there is a difference between a current form state and your model, e.g. by calling lodash's ",Object(i.b)("inlineCode",{parentName:"p"},"isEqual")," function.\nCurrent form state can be accessed through the context (see ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/faq#how-can-i-know-a-current-form-state"}),"How can I know a current form state?"),") and form model can be passed as an ordinary prop:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"function DifferentSubmitField({ initialModel }) {\n  const { model } = useForm();\n  return <SubmitField disabled={isEqual(uniforms.model, initialModel)} />;\n}\n\nconst ChangedForm = ({ model }) => (\n  <AutoForm model={model}>\n    <DifferentSubmitField initialModel={model} />\n  </AutoForm>\n);\n")))}m.isMDXComponent=!0}}]);